// Generated by `wit-bindgen` 0.43.0. DO NOT EDIT!
#ifndef __CPP_GUEST_BINDINGS_MODULE_H
#define __CPP_GUEST_BINDINGS_MODULE_H
#define WIT_SYMMETRIC
#include "wit.h"
#include <cassert>
#include <cstdint>
#include <optional>
#include <utility>
namespace symmetric {
namespace runtime {
namespace symmetric_executor { /// These pseudo-resources are just used to
/// pass pointers to register
/// Return value of an event callback
enum class CallbackState : uint8_t {
  /// Call the function again
  kPending = 0,
  /// The function has completed, all results are written, data is freed,
  /// calling the function again is not permitted as data became invalid!
  kReady = 1,
};

class CallbackFunction : public wit::ResourceImportBase {

public:
  ~CallbackFunction();
  CallbackFunction(wit::ResourceImportBase &&);
  CallbackFunction(CallbackFunction &&) = default;
  CallbackFunction &operator=(CallbackFunction &&) = default;
  CallbackFunction(const CallbackFunction &) = delete;
  CallbackFunction &operator=(const CallbackFunction &) = delete;
};

class CallbackData : public wit::ResourceImportBase {

public:
  ~CallbackData();
  CallbackData(wit::ResourceImportBase &&);
  CallbackData(CallbackData &&) = default;
  CallbackData &operator=(CallbackData &&) = default;
  CallbackData(const CallbackData &) = delete;
  CallbackData &operator=(const CallbackData &) = delete;
};

class EventSubscription : public wit::ResourceImportBase {

public:
  ~EventSubscription();
  bool Ready() const;
  static EventSubscription FromTimeout(uint64_t nanoseconds);
  EventSubscription Dup() const;
  void Reset() const;
  EventSubscription(wit::ResourceImportBase &&);
  EventSubscription(EventSubscription &&) = default;
  EventSubscription &operator=(EventSubscription &&) = default;
  EventSubscription(const EventSubscription &) = delete;
  EventSubscription &operator=(const EventSubscription &) = delete;
};

class EventGenerator : public wit::ResourceImportBase {

public:
  ~EventGenerator();
  EventGenerator();
  EventSubscription Subscribe() const;
  void Activate() const;
  EventGenerator(wit::ResourceImportBase &&);
  EventGenerator(EventGenerator &&) = default;
  EventGenerator &operator=(EventGenerator &&) = default;
  EventGenerator(const EventGenerator &) = delete;
  EventGenerator &operator=(const EventGenerator &) = delete;
};

class CallbackRegistration : public wit::ResourceImportBase {

public:
  ~CallbackRegistration();
  static CallbackData Cancel(symmetric_executor::CallbackRegistration &&obj);
  CallbackRegistration(wit::ResourceImportBase &&);
  CallbackRegistration(CallbackRegistration &&) = default;
  CallbackRegistration &operator=(CallbackRegistration &&) = default;
  CallbackRegistration(const CallbackRegistration &) = delete;
  CallbackRegistration &operator=(const CallbackRegistration &) = delete;
};

/// Return value of an async call, lowest bit encoding
enum class CallStatus : uint8_t {
  /// For symmetric this means that processing has started, parameters should
  /// still remain valid until null,
  /// params-read = non-null, results-written,done = null
  kStarted = 0,
  /// For symmetric: Retry the call (temporarily out of memory)
  kNotStarted = 1,
};

void Run();
CallbackRegistration Register(EventSubscription &&trigger,
                              CallbackFunction &&callback, CallbackData &&data);
void BlockOn(EventSubscription &&trigger);
} // namespace symmetric_executor
namespace symmetric_stream {
using EventSubscription = symmetric_executor::EventSubscription;
class Address : public wit::ResourceImportBase {

public:
  ~Address();
  Address(wit::ResourceImportBase &&);
  Address(Address &&) = default;
  Address &operator=(Address &&) = default;
  Address(const Address &) = delete;
  Address &operator=(const Address &) = delete;
};

class Buffer : public wit::ResourceImportBase {

public:
  ~Buffer();
  Buffer(symmetric_stream::Address &&addr, uint64_t capacity);
  Address GetAddress() const;
  uint64_t GetSize() const;
  void SetSize(uint64_t size) const;
  uint64_t Capacity() const;
  Buffer(wit::ResourceImportBase &&);
  Buffer(Buffer &&) = default;
  Buffer &operator=(Buffer &&) = default;
  Buffer(const Buffer &) = delete;
  Buffer &operator=(const Buffer &) = delete;
};

class StreamObj : public wit::ResourceImportBase {

public:
  ~StreamObj();
  StreamObj();
  StreamObj Clone() const;
  bool IsWriteClosed() const;
  void StartReading(symmetric_stream::Buffer &&buffer) const;
  void WriteReadyActivate() const;
  symmetric_executor::EventSubscription ReadReadySubscribe() const;
  std::optional<Buffer> ReadResult() const;
  bool IsReadyToWrite() const;
  symmetric_executor::EventSubscription WriteReadySubscribe() const;
  Buffer StartWriting() const;
  void FinishWriting(std::optional<symmetric_stream::Buffer> buffer) const;
  void ReadReadyActivate() const;
  StreamObj(wit::ResourceImportBase &&);
  StreamObj(StreamObj &&) = default;
  StreamObj &operator=(StreamObj &&) = default;
  StreamObj(const StreamObj &) = delete;
  StreamObj &operator=(const StreamObj &) = delete;
};

} // namespace symmetric_stream
} // namespace runtime
} // namespace symmetric

#endif
