// Generated by `wit-bindgen` 0.43.0. DO NOT EDIT!
// Options used:
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod symmetric {
        pub mod runtime {
            /// This interface will only work with symmetric ABI (shared everything),
            /// it can't be composed with the canonical ABI
            /// Asynchronous executor functionality for symmetric ABI
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod symmetric_executor {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                /// These pseudo-resources are just used to
                /// pass pointers to register
                /// Return value of an event callback
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
                pub enum CallbackState {
                    /// Call the function again
                    Pending,
                    /// The function has completed, all results are written, data is freed,
                    /// calling the function again is not permitted as data became invalid!
                    Ready,
                }
                impl ::core::fmt::Debug for CallbackState {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            CallbackState::Pending => {
                                f.debug_tuple("CallbackState::Pending").finish()
                            }
                            CallbackState::Ready => {
                                f.debug_tuple("CallbackState::Ready").finish()
                            }
                        }
                    }
                }
                impl CallbackState {
                    #[doc(hidden)]
                    pub unsafe fn _lift(val: u8) -> CallbackState {
                        if !cfg!(debug_assertions) {
                            return unsafe { ::core::mem::transmute(val) };
                        }
                        match val {
                            0 => CallbackState::Pending,
                            1 => CallbackState::Ready,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }
                /// This wraps a user provided function of type
                /// `fn (callback-data) -> callback-state`
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct CallbackFunction {
                    handle: _rt::Resource<CallbackFunction>,
                }
                type _CallbackFunctionRep<T> = Option<T>;
                impl CallbackFunction {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `CallbackFunction`.
                    pub fn new<T: GuestCallbackFunction>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _CallbackFunctionRep<T> = Some(val);
                        let ptr: *mut _CallbackFunctionRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestCallbackFunction>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestCallbackFunction>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestCallbackFunction>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: usize) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> usize {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> usize {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _CallbackFunctionRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestCallbackFunction>(
                        &self,
                    ) -> *mut _CallbackFunctionRep<T> {
                        CallbackFunction::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`CallbackFunction`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct CallbackFunctionBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a CallbackFunction>,
                }
                impl<'a> CallbackFunctionBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestCallbackFunction>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _CallbackFunctionRep<T> {
                        CallbackFunction::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for CallbackFunction {
                    #[inline]
                    unsafe fn drop(_handle: usize) {
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-executor@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[resource-drop]callback-function"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5Bresource_dropX5Dcallback_function(
                                _: *mut u8,
                            );
                        }
                        unsafe {
                            symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5Bresource_dropX5Dcallback_function(
                                _handle as *mut u8,
                            )
                        };
                    }
                }
                /// This wraps opaque user data, freed by the callback when
                /// it returns ready
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct CallbackData {
                    handle: _rt::Resource<CallbackData>,
                }
                type _CallbackDataRep<T> = Option<T>;
                impl CallbackData {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `CallbackData`.
                    pub fn new<T: GuestCallbackData>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _CallbackDataRep<T> = Some(val);
                        let ptr: *mut _CallbackDataRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestCallbackData>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestCallbackData>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestCallbackData>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: usize) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> usize {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> usize {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _CallbackDataRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestCallbackData>(&self) -> *mut _CallbackDataRep<T> {
                        CallbackData::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`CallbackData`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct CallbackDataBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a CallbackData>,
                }
                impl<'a> CallbackDataBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestCallbackData>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _CallbackDataRep<T> {
                        CallbackData::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for CallbackData {
                    #[inline]
                    unsafe fn drop(_handle: usize) {
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-executor@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[resource-drop]callback-data"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5Bresource_dropX5Dcallback_data(
                                _: *mut u8,
                            );
                        }
                        unsafe {
                            symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5Bresource_dropX5Dcallback_data(
                                _handle as *mut u8,
                            )
                        };
                    }
                }
                /// The receiving side of an event
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct EventSubscription {
                    handle: _rt::Resource<EventSubscription>,
                }
                type _EventSubscriptionRep<T> = Option<T>;
                impl EventSubscription {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `EventSubscription`.
                    pub fn new<T: GuestEventSubscription>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _EventSubscriptionRep<T> = Some(val);
                        let ptr: *mut _EventSubscriptionRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestEventSubscription>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestEventSubscription>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestEventSubscription>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: usize) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> usize {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> usize {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _EventSubscriptionRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestEventSubscription>(
                        &self,
                    ) -> *mut _EventSubscriptionRep<T> {
                        EventSubscription::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`EventSubscription`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct EventSubscriptionBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a EventSubscription>,
                }
                impl<'a> EventSubscriptionBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestEventSubscription>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _EventSubscriptionRep<T> {
                        EventSubscription::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for EventSubscription {
                    #[inline]
                    unsafe fn drop(_handle: usize) {
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-executor@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[resource-drop]event-subscription"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5Bresource_dropX5Devent_subscription(
                                _: *mut u8,
                            );
                        }
                        unsafe {
                            symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5Bresource_dropX5Devent_subscription(
                                _handle as *mut u8,
                            )
                        };
                    }
                }
                /// A user controlled event
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct EventGenerator {
                    handle: _rt::Resource<EventGenerator>,
                }
                type _EventGeneratorRep<T> = Option<T>;
                impl EventGenerator {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `EventGenerator`.
                    pub fn new<T: GuestEventGenerator>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _EventGeneratorRep<T> = Some(val);
                        let ptr: *mut _EventGeneratorRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestEventGenerator>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestEventGenerator>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestEventGenerator>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: usize) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> usize {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> usize {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _EventGeneratorRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestEventGenerator>(
                        &self,
                    ) -> *mut _EventGeneratorRep<T> {
                        EventGenerator::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`EventGenerator`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct EventGeneratorBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a EventGenerator>,
                }
                impl<'a> EventGeneratorBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestEventGenerator>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _EventGeneratorRep<T> {
                        EventGenerator::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for EventGenerator {
                    #[inline]
                    unsafe fn drop(_handle: usize) {
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-executor@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[resource-drop]event-generator"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5Bresource_dropX5Devent_generator(
                                _: *mut u8,
                            );
                        }
                        unsafe {
                            symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5Bresource_dropX5Devent_generator(
                                _handle as *mut u8,
                            )
                        };
                    }
                }
                /// Handle to cancel a callback registration
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct CallbackRegistration {
                    handle: _rt::Resource<CallbackRegistration>,
                }
                type _CallbackRegistrationRep<T> = Option<T>;
                impl CallbackRegistration {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `CallbackRegistration`.
                    pub fn new<T: GuestCallbackRegistration>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _CallbackRegistrationRep<T> = Some(val);
                        let ptr: *mut _CallbackRegistrationRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestCallbackRegistration>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestCallbackRegistration>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestCallbackRegistration>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: usize) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> usize {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> usize {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(
                                handle as *mut _CallbackRegistrationRep<T>,
                            )
                        };
                    }
                    fn as_ptr<T: GuestCallbackRegistration>(
                        &self,
                    ) -> *mut _CallbackRegistrationRep<T> {
                        CallbackRegistration::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`CallbackRegistration`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct CallbackRegistrationBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a CallbackRegistration>,
                }
                impl<'a> CallbackRegistrationBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestCallbackRegistration>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _CallbackRegistrationRep<T> {
                        CallbackRegistration::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for CallbackRegistration {
                    #[inline]
                    unsafe fn drop(_handle: usize) {
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-executor@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[resource-drop]callback-registration"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5Bresource_dropX5Dcallback_registration(
                                _: *mut u8,
                            );
                        }
                        unsafe {
                            symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5Bresource_dropX5Dcallback_registration(
                                _handle as *mut u8,
                            )
                        };
                    }
                }
                /// Return value of an async call, lowest bit encoding
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
                pub enum CallStatus {
                    /// For symmetric this means that processing has started, parameters should still remain valid until null,
                    /// params-read = non-null, results-written,done = null
                    Started,
                    /// For symmetric: Retry the call (temporarily out of memory)
                    NotStarted,
                }
                impl ::core::fmt::Debug for CallStatus {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            CallStatus::Started => {
                                f.debug_tuple("CallStatus::Started").finish()
                            }
                            CallStatus::NotStarted => {
                                f.debug_tuple("CallStatus::NotStarted").finish()
                            }
                        }
                    }
                }
                impl CallStatus {
                    #[doc(hidden)]
                    pub unsafe fn _lift(val: u8) -> CallStatus {
                        if !cfg!(debug_assertions) {
                            return unsafe { ::core::mem::transmute(val) };
                        }
                        match val {
                            0 => CallStatus::Started,
                            1 => CallStatus::NotStarted,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case, unused_unsafe)]
                pub unsafe fn _export_method_event_subscription_ready_cabi<
                    T: GuestEventSubscription,
                >(arg0: *mut u8) -> i32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                        let result0 = {
                            T::ready(EventSubscriptionBorrow::lift(arg0 as usize).get())
                        };
                        match result0 {
                            true => 1,
                            false => 0,
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case, unused_unsafe)]
                pub unsafe fn _export_static_event_subscription_from_timeout_cabi<
                    T: GuestEventSubscription,
                >(arg0: i64) -> *mut u8 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                        let result0 = { T::from_timeout(arg0 as u64) };
                        (result0).take_handle() as *mut u8
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case, unused_unsafe)]
                pub unsafe fn _export_method_event_subscription_dup_cabi<
                    T: GuestEventSubscription,
                >(arg0: *mut u8) -> *mut u8 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                        let result0 = {
                            T::dup(EventSubscriptionBorrow::lift(arg0 as usize).get())
                        };
                        (result0).take_handle() as *mut u8
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case, unused_unsafe)]
                pub unsafe fn _export_method_event_subscription_reset_cabi<
                    T: GuestEventSubscription,
                >(arg0: *mut u8) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                        { T::reset(EventSubscriptionBorrow::lift(arg0 as usize).get()) };
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case, unused_unsafe)]
                pub unsafe fn _export_constructor_event_generator_cabi<
                    T: GuestEventGenerator,
                >() -> *mut u8 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                        let result0 = { EventGenerator::new(T::new()) };
                        (result0).take_handle() as *mut u8
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case, unused_unsafe)]
                pub unsafe fn _export_method_event_generator_subscribe_cabi<
                    T: GuestEventGenerator,
                >(arg0: *mut u8) -> *mut u8 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                        let result0 = {
                            T::subscribe(EventGeneratorBorrow::lift(arg0 as usize).get())
                        };
                        (result0).take_handle() as *mut u8
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case, unused_unsafe)]
                pub unsafe fn _export_method_event_generator_activate_cabi<
                    T: GuestEventGenerator,
                >(arg0: *mut u8) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                        { T::activate(EventGeneratorBorrow::lift(arg0 as usize).get()) };
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case, unused_unsafe)]
                pub unsafe fn _export_static_callback_registration_cancel_cabi<
                    T: GuestCallbackRegistration,
                >(arg0: *mut u8) -> *mut u8 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                        let result0 = {
                            T::cancel(CallbackRegistration::from_handle(arg0 as usize))
                        };
                        (result0).take_handle() as *mut u8
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case, unused_unsafe)]
                pub unsafe fn _export_run_cabi<T: Guest>() {
                    unsafe {
                        #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                        { T::run() };
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case, unused_unsafe)]
                pub unsafe fn _export_register_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: *mut u8,
                ) -> *mut u8 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                        let result0 = {
                            T::register(
                                EventSubscription::from_handle(arg0 as usize),
                                CallbackFunction::from_handle(arg1 as usize),
                                CallbackData::from_handle(arg2 as usize),
                            )
                        };
                        (result0).take_handle() as *mut u8
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case, unused_unsafe)]
                pub unsafe fn _export_block_on_cabi<T: Guest>(arg0: *mut u8) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                        { T::block_on(EventSubscription::from_handle(arg0 as usize)) };
                    }
                }
                pub trait Guest {
                    type CallbackFunction: GuestCallbackFunction;
                    type CallbackData: GuestCallbackData;
                    type EventSubscription: GuestEventSubscription;
                    type EventGenerator: GuestEventGenerator;
                    type CallbackRegistration: GuestCallbackRegistration;
                    /// Wait until all registered events have completed
                    #[allow(async_fn_in_trait)]
                    fn run() -> ();
                    /// Register a callback for an event
                    #[allow(async_fn_in_trait)]
                    fn register(
                        trigger: EventSubscription,
                        callback: CallbackFunction,
                        data: CallbackData,
                    ) -> CallbackRegistration;
                    /// Wait for a specific event
                    #[allow(async_fn_in_trait)]
                    fn block_on(trigger: EventSubscription) -> ();
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_drop_callbackFunction_cabi<
                    T: GuestCallbackFunction,
                >(arg0: usize) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    CallbackFunction::dtor::<T>(arg0 as *mut u8);
                }
                pub trait GuestCallbackFunction: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> usize
                    where
                        Self: Sized,
                    {
                        val as usize
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: usize) -> *mut u8
                    where
                        Self: Sized,
                    {
                        handle as *mut u8
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_drop_callbackData_cabi<T: GuestCallbackData>(
                    arg0: usize,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    CallbackData::dtor::<T>(arg0 as *mut u8);
                }
                pub trait GuestCallbackData: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> usize
                    where
                        Self: Sized,
                    {
                        val as usize
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: usize) -> *mut u8
                    where
                        Self: Sized,
                    {
                        handle as *mut u8
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_drop_eventSubscription_cabi<
                    T: GuestEventSubscription,
                >(arg0: usize) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    EventSubscription::dtor::<T>(arg0 as *mut u8);
                }
                pub trait GuestEventSubscription: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> usize
                    where
                        Self: Sized,
                    {
                        val as usize
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: usize) -> *mut u8
                    where
                        Self: Sized,
                    {
                        handle as *mut u8
                    }
                    /// Whether the event is active (used by poll implementation)
                    #[allow(async_fn_in_trait)]
                    fn ready(&self) -> bool;
                    /// Create a timeout event
                    #[allow(async_fn_in_trait)]
                    fn from_timeout(nanoseconds: u64) -> EventSubscription;
                    /// Duplicate the subscription (e.g. for repeated callback registering, same cost as subscribe)
                    #[allow(async_fn_in_trait)]
                    fn dup(&self) -> EventSubscription;
                    /// Reset subscription to be inactive, only next trigger will ready it
                    #[allow(async_fn_in_trait)]
                    fn reset(&self) -> ();
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_drop_eventGenerator_cabi<T: GuestEventGenerator>(
                    arg0: usize,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    EventGenerator::dtor::<T>(arg0 as *mut u8);
                }
                pub trait GuestEventGenerator: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> usize
                    where
                        Self: Sized,
                    {
                        val as usize
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: usize) -> *mut u8
                    where
                        Self: Sized,
                    {
                        handle as *mut u8
                    }
                    #[allow(async_fn_in_trait)]
                    fn new() -> Self;
                    /// Get the receiving side (to pass to other parts of the program)
                    #[allow(async_fn_in_trait)]
                    fn subscribe(&self) -> EventSubscription;
                    /// Trigger all subscribers
                    #[allow(async_fn_in_trait)]
                    fn activate(&self) -> ();
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_drop_callbackRegistration_cabi<
                    T: GuestCallbackRegistration,
                >(arg0: usize) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    CallbackRegistration::dtor::<T>(arg0 as *mut u8);
                }
                pub trait GuestCallbackRegistration: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> usize
                    where
                        Self: Sized,
                    {
                        val as usize
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: usize) -> *mut u8
                    where
                        Self: Sized,
                    {
                        handle as *mut u8
                    }
                    /// returns the data passed to the registration
                    #[allow(async_fn_in_trait)]
                    fn cancel(obj: CallbackRegistration) -> CallbackData;
                }
                #[doc(hidden)]
                macro_rules! __export_symmetric_runtime_symmetric_executor_0_2_1_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[cfg_attr(target_arch = "wasm32", export_name =
                        "[method]event-subscription.ready")] #[cfg_attr(not(target_arch =
                        "wasm32"), no_mangle)] #[allow(non_snake_case)] unsafe extern "C"
                        fn
                        symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5BmethodX5Devent_subscriptionX2Eready(arg0
                        : * mut u8,) -> i32 { unsafe { $($path_to_types)*::
                        _export_method_event_subscription_ready_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::EventSubscription > (arg0) } }
                        #[cfg_attr(target_arch = "wasm32", export_name =
                        "[static]event-subscription.from-timeout")]
                        #[cfg_attr(not(target_arch = "wasm32"), no_mangle)]
                        #[allow(non_snake_case)] unsafe extern "C" fn
                        symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5BstaticX5Devent_subscriptionX2Efrom_timeout(arg0
                        : i64,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_static_event_subscription_from_timeout_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::EventSubscription > (arg0) } }
                        #[cfg_attr(target_arch = "wasm32", export_name =
                        "[method]event-subscription.dup")] #[cfg_attr(not(target_arch =
                        "wasm32"), no_mangle)] #[allow(non_snake_case)] unsafe extern "C"
                        fn
                        symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5BmethodX5Devent_subscriptionX2Edup(arg0
                        : * mut u8,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_method_event_subscription_dup_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::EventSubscription > (arg0) } }
                        #[cfg_attr(target_arch = "wasm32", export_name =
                        "[method]event-subscription.reset")] #[cfg_attr(not(target_arch =
                        "wasm32"), no_mangle)] #[allow(non_snake_case)] unsafe extern "C"
                        fn
                        symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5BmethodX5Devent_subscriptionX2Ereset(arg0
                        : * mut u8,) { unsafe { $($path_to_types)*::
                        _export_method_event_subscription_reset_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::EventSubscription > (arg0) } }
                        #[cfg_attr(target_arch = "wasm32", export_name =
                        "[constructor]event-generator")] #[cfg_attr(not(target_arch =
                        "wasm32"), no_mangle)] #[allow(non_snake_case)] unsafe extern "C"
                        fn
                        symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5BconstructorX5Devent_generator()
                        -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_constructor_event_generator_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::EventGenerator > () } }
                        #[cfg_attr(target_arch = "wasm32", export_name =
                        "[method]event-generator.subscribe")] #[cfg_attr(not(target_arch
                        = "wasm32"), no_mangle)] #[allow(non_snake_case)] unsafe extern
                        "C" fn
                        symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5BmethodX5Devent_generatorX2Esubscribe(arg0
                        : * mut u8,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_method_event_generator_subscribe_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::EventGenerator > (arg0) } }
                        #[cfg_attr(target_arch = "wasm32", export_name =
                        "[method]event-generator.activate")] #[cfg_attr(not(target_arch =
                        "wasm32"), no_mangle)] #[allow(non_snake_case)] unsafe extern "C"
                        fn
                        symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5BmethodX5Devent_generatorX2Eactivate(arg0
                        : * mut u8,) { unsafe { $($path_to_types)*::
                        _export_method_event_generator_activate_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::EventGenerator > (arg0) } }
                        #[cfg_attr(target_arch = "wasm32", export_name =
                        "[static]callback-registration.cancel")]
                        #[cfg_attr(not(target_arch = "wasm32"), no_mangle)]
                        #[allow(non_snake_case)] unsafe extern "C" fn
                        symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5BstaticX5Dcallback_registrationX2Ecancel(arg0
                        : * mut u8,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_static_callback_registration_cancel_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::CallbackRegistration > (arg0) } }
                        #[cfg_attr(target_arch = "wasm32", export_name = "run")]
                        #[cfg_attr(not(target_arch = "wasm32"), no_mangle)]
                        #[allow(non_snake_case)] unsafe extern "C" fn
                        symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00run() {
                        unsafe { $($path_to_types)*:: _export_run_cabi::<$ty > () } }
                        #[cfg_attr(target_arch = "wasm32", export_name = "register")]
                        #[cfg_attr(not(target_arch = "wasm32"), no_mangle)]
                        #[allow(non_snake_case)] unsafe extern "C" fn
                        symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00register(arg0
                        : * mut u8, arg1 : * mut u8, arg2 : * mut u8,) -> * mut u8 {
                        unsafe { $($path_to_types)*:: _export_register_cabi::<$ty >
                        (arg0, arg1, arg2) } } #[cfg_attr(target_arch = "wasm32",
                        export_name = "block-on")] #[cfg_attr(not(target_arch =
                        "wasm32"), no_mangle)] #[allow(non_snake_case)] unsafe extern "C"
                        fn
                        symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00block_on(arg0
                        : * mut u8,) { unsafe { $($path_to_types)*::
                        _export_block_on_cabi::<$ty > (arg0) } }
                        #[cfg_attr(not(target_arch = "wasm32"), no_mangle)]
                        #[allow(non_snake_case)] unsafe extern "C" fn
                        symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5Bresource_dropX5Dcallback_function(arg0
                        : usize) { $($path_to_types)*::
                        _export_drop_callbackFunction_cabi::<<$ty as $($path_to_types)*::
                        Guest >::CallbackFunction > (arg0) } #[cfg_attr(not(target_arch =
                        "wasm32"), no_mangle)] #[allow(non_snake_case)] unsafe extern "C"
                        fn
                        symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5Bresource_dropX5Dcallback_data(arg0
                        : usize) { $($path_to_types)*::
                        _export_drop_callbackData_cabi::<<$ty as $($path_to_types)*::
                        Guest >::CallbackData > (arg0) } #[cfg_attr(not(target_arch =
                        "wasm32"), no_mangle)] #[allow(non_snake_case)] unsafe extern "C"
                        fn
                        symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5Bresource_dropX5Devent_subscription(arg0
                        : usize) { $($path_to_types)*::
                        _export_drop_eventSubscription_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::EventSubscription > (arg0) }
                        #[cfg_attr(not(target_arch = "wasm32"), no_mangle)]
                        #[allow(non_snake_case)] unsafe extern "C" fn
                        symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5Bresource_dropX5Devent_generator(arg0
                        : usize) { $($path_to_types)*::
                        _export_drop_eventGenerator_cabi::<<$ty as $($path_to_types)*::
                        Guest >::EventGenerator > (arg0) } #[cfg_attr(not(target_arch =
                        "wasm32"), no_mangle)] #[allow(non_snake_case)] unsafe extern "C"
                        fn
                        symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5Bresource_dropX5Dcallback_registration(arg0
                        : usize) { $($path_to_types)*::
                        _export_drop_callbackRegistration_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::CallbackRegistration > (arg0) } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_symmetric_runtime_symmetric_executor_0_2_1_cabi;
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicUsize, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicUsize,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: usize);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: usize) -> Self {
            debug_assert!(handle != 0 && handle != 0);
            Self {
                handle: AtomicUsize::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> usize {
            resource.handle.swap(0, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> usize {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    0 => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::boxed::Box;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen::rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_executor_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::symmetric::runtime::symmetric_executor::__export_symmetric_runtime_symmetric_executor_0_2_1_cabi!($ty
        with_types_in $($path_to_types_root)*::
        exports::symmetric::runtime::symmetric_executor);
    };
}
#[doc(inline)]
pub(crate) use __export_executor_impl as export;
#[rustfmt::skip]
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.43.0:symmetric:runtime@0.2.1:executor:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 900] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x85\x06\x01A\x02\x01\
A\x02\x01B&\x01m\x02\x07pending\x05ready\x04\0\x0ecallback-state\x03\0\0\x04\0\x11\
callback-function\x03\x01\x04\0\x0dcallback-data\x03\x01\x04\0\x12event-subscrip\
tion\x03\x01\x04\0\x0fevent-generator\x03\x01\x04\0\x15callback-registration\x03\
\x01\x01m\x02\x07started\x0bnot-started\x04\0\x0bcall-status\x03\0\x07\x01h\x04\x01\
@\x01\x04self\x09\0\x7f\x04\0\x20[method]event-subscription.ready\x01\x0a\x01i\x04\
\x01@\x01\x0bnanosecondsw\0\x0b\x04\0'[static]event-subscription.from-timeout\x01\
\x0c\x01@\x01\x04self\x09\0\x0b\x04\0\x1e[method]event-subscription.dup\x01\x0d\x01\
@\x01\x04self\x09\x01\0\x04\0\x20[method]event-subscription.reset\x01\x0e\x01i\x05\
\x01@\0\0\x0f\x04\0\x1c[constructor]event-generator\x01\x10\x01h\x05\x01@\x01\x04\
self\x11\0\x0b\x04\0![method]event-generator.subscribe\x01\x12\x01@\x01\x04self\x11\
\x01\0\x04\0\x20[method]event-generator.activate\x01\x13\x01i\x06\x01i\x03\x01@\x01\
\x03obj\x14\0\x15\x04\0$[static]callback-registration.cancel\x01\x16\x01@\0\x01\0\
\x04\0\x03run\x01\x17\x01i\x02\x01@\x03\x07trigger\x0b\x08callback\x18\x04data\x15\
\0\x14\x04\0\x08register\x01\x19\x01@\x01\x07trigger\x0b\x01\0\x04\0\x08block-on\
\x01\x1a\x04\0*symmetric:runtime/symmetric-executor@0.2.1\x05\0\x04\0\x20symmetr\
ic:runtime/executor@0.2.1\x04\0\x0b\x0e\x01\0\x08executor\x03\0\0\0G\x09producer\
s\x01\x0cprocessed-by\x02\x0dwit-component\x070.235.0\x10wit-bindgen-rust\x060.4\
3.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen::rt::maybe_link_cabi_realloc();
}
