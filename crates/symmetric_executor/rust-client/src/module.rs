// Generated by `wit-bindgen` 0.43.0. DO NOT EDIT!
// Options used:
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod symmetric {
    pub mod runtime {
        /// This interface will only work with symmetric ABI (shared everything),
        /// it can't be composed with the canonical ABI
        /// Asynchronous executor functionality for symmetric ABI
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod symmetric_executor {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// These pseudo-resources are just used to
            /// pass pointers to register
            /// Return value of an event callback
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum CallbackState {
                /// Call the function again
                Pending,
                /// The function has completed, all results are written, data is freed,
                /// calling the function again is not permitted as data became invalid!
                Ready,
            }
            impl ::core::fmt::Debug for CallbackState {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        CallbackState::Pending => {
                            f.debug_tuple("CallbackState::Pending").finish()
                        }
                        CallbackState::Ready => {
                            f.debug_tuple("CallbackState::Ready").finish()
                        }
                    }
                }
            }
            impl CallbackState {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> CallbackState {
                    if !cfg!(debug_assertions) {
                        return unsafe { ::core::mem::transmute(val) };
                    }
                    match val {
                        0 => CallbackState::Pending,
                        1 => CallbackState::Ready,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// This wraps a user provided function of type
            /// `fn (callback-data) -> callback-state`
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct CallbackFunction {
                handle: _rt::Resource<CallbackFunction>,
            }
            impl CallbackFunction {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: usize) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> usize {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> usize {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for CallbackFunction {
                #[inline]
                unsafe fn drop(_handle: usize) {
                    #[link(
                        wasm_import_module = "symmetric:runtime/symmetric-executor@0.2.1"
                    )]
                    unsafe extern "C" {
                        #[allow(non_snake_case)]
                        #[cfg_attr(
                            target_arch = "wasm32",
                            link_name = "[resource-drop]callback-function"
                        )]
                        fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5Bresource_dropX5Dcallback_function(
                            _: *mut u8,
                        );
                    }
                    unsafe {
                        symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5Bresource_dropX5Dcallback_function(
                            _handle as *mut u8,
                        )
                    };
                }
            }
            /// This wraps opaque user data, freed by the callback when
            /// it returns ready
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct CallbackData {
                handle: _rt::Resource<CallbackData>,
            }
            impl CallbackData {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: usize) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> usize {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> usize {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for CallbackData {
                #[inline]
                unsafe fn drop(_handle: usize) {
                    #[link(
                        wasm_import_module = "symmetric:runtime/symmetric-executor@0.2.1"
                    )]
                    unsafe extern "C" {
                        #[allow(non_snake_case)]
                        #[cfg_attr(
                            target_arch = "wasm32",
                            link_name = "[resource-drop]callback-data"
                        )]
                        fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5Bresource_dropX5Dcallback_data(
                            _: *mut u8,
                        );
                    }
                    unsafe {
                        symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5Bresource_dropX5Dcallback_data(
                            _handle as *mut u8,
                        )
                    };
                }
            }
            /// The receiving side of an event
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct EventSubscription {
                handle: _rt::Resource<EventSubscription>,
            }
            impl EventSubscription {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: usize) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> usize {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> usize {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for EventSubscription {
                #[inline]
                unsafe fn drop(_handle: usize) {
                    #[link(
                        wasm_import_module = "symmetric:runtime/symmetric-executor@0.2.1"
                    )]
                    unsafe extern "C" {
                        #[allow(non_snake_case)]
                        #[cfg_attr(
                            target_arch = "wasm32",
                            link_name = "[resource-drop]event-subscription"
                        )]
                        fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5Bresource_dropX5Devent_subscription(
                            _: *mut u8,
                        );
                    }
                    unsafe {
                        symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5Bresource_dropX5Devent_subscription(
                            _handle as *mut u8,
                        )
                    };
                }
            }
            /// A user controlled event
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct EventGenerator {
                handle: _rt::Resource<EventGenerator>,
            }
            impl EventGenerator {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: usize) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> usize {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> usize {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for EventGenerator {
                #[inline]
                unsafe fn drop(_handle: usize) {
                    #[link(
                        wasm_import_module = "symmetric:runtime/symmetric-executor@0.2.1"
                    )]
                    unsafe extern "C" {
                        #[allow(non_snake_case)]
                        #[cfg_attr(
                            target_arch = "wasm32",
                            link_name = "[resource-drop]event-generator"
                        )]
                        fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5Bresource_dropX5Devent_generator(
                            _: *mut u8,
                        );
                    }
                    unsafe {
                        symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5Bresource_dropX5Devent_generator(
                            _handle as *mut u8,
                        )
                    };
                }
            }
            /// Handle to cancel a callback registration
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct CallbackRegistration {
                handle: _rt::Resource<CallbackRegistration>,
            }
            impl CallbackRegistration {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: usize) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> usize {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> usize {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for CallbackRegistration {
                #[inline]
                unsafe fn drop(_handle: usize) {
                    #[link(
                        wasm_import_module = "symmetric:runtime/symmetric-executor@0.2.1"
                    )]
                    unsafe extern "C" {
                        #[allow(non_snake_case)]
                        #[cfg_attr(
                            target_arch = "wasm32",
                            link_name = "[resource-drop]callback-registration"
                        )]
                        fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5Bresource_dropX5Dcallback_registration(
                            _: *mut u8,
                        );
                    }
                    unsafe {
                        symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5Bresource_dropX5Dcallback_registration(
                            _handle as *mut u8,
                        )
                    };
                }
            }
            /// Return value of an async call, lowest bit encoding
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum CallStatus {
                /// For symmetric this means that processing has started, parameters should still remain valid until null,
                /// params-read = non-null, results-written,done = null
                Started,
                /// For symmetric: Retry the call (temporarily out of memory)
                NotStarted,
            }
            impl ::core::fmt::Debug for CallStatus {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        CallStatus::Started => {
                            f.debug_tuple("CallStatus::Started").finish()
                        }
                        CallStatus::NotStarted => {
                            f.debug_tuple("CallStatus::NotStarted").finish()
                        }
                    }
                }
            }
            impl CallStatus {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> CallStatus {
                    if !cfg!(debug_assertions) {
                        return unsafe { ::core::mem::transmute(val) };
                    }
                    match val {
                        0 => CallStatus::Started,
                        1 => CallStatus::NotStarted,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            impl EventSubscription {
                #[allow(unused_unsafe, clippy::all)]
                /// Whether the event is active (used by poll implementation)
                #[allow(async_fn_in_trait)]
                pub fn ready(&self) -> bool {
                    unsafe {
                        #[link(name = "symmetric_executor")]
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-executor@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[method]event-subscription.ready"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5BmethodX5Devent_subscriptionX2Eready(
                                _: *mut u8,
                            ) -> i32;
                        }
                        let ret = symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5BmethodX5Devent_subscriptionX2Eready(
                            (self).handle() as *mut u8,
                        );
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl EventSubscription {
                #[allow(unused_unsafe, clippy::all)]
                /// Create a timeout event
                #[allow(async_fn_in_trait)]
                pub fn from_timeout(nanoseconds: u64) -> EventSubscription {
                    unsafe {
                        #[link(name = "symmetric_executor")]
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-executor@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[static]event-subscription.from-timeout"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5BstaticX5Devent_subscriptionX2Efrom_timeout(
                                _: i64,
                            ) -> *mut u8;
                        }
                        let ret = symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5BstaticX5Devent_subscriptionX2Efrom_timeout(
                            _rt::as_i64(&nanoseconds),
                        );
                        EventSubscription::from_handle(ret as usize)
                    }
                }
            }
            impl EventSubscription {
                #[allow(unused_unsafe, clippy::all)]
                /// Duplicate the subscription (e.g. for repeated callback registering, same cost as subscribe)
                #[allow(async_fn_in_trait)]
                pub fn dup(&self) -> EventSubscription {
                    unsafe {
                        #[link(name = "symmetric_executor")]
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-executor@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[method]event-subscription.dup"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5BmethodX5Devent_subscriptionX2Edup(
                                _: *mut u8,
                            ) -> *mut u8;
                        }
                        let ret = symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5BmethodX5Devent_subscriptionX2Edup(
                            (self).handle() as *mut u8,
                        );
                        EventSubscription::from_handle(ret as usize)
                    }
                }
            }
            impl EventSubscription {
                #[allow(unused_unsafe, clippy::all)]
                /// Reset subscription to be inactive, only next trigger will ready it
                #[allow(async_fn_in_trait)]
                pub fn reset(&self) -> () {
                    unsafe {
                        #[link(name = "symmetric_executor")]
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-executor@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[method]event-subscription.reset"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5BmethodX5Devent_subscriptionX2Ereset(
                                _: *mut u8,
                            );
                        }
                        symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5BmethodX5Devent_subscriptionX2Ereset(
                            (self).handle() as *mut u8,
                        );
                    }
                }
            }
            impl EventGenerator {
                #[allow(unused_unsafe, clippy::all)]
                #[allow(async_fn_in_trait)]
                pub fn new() -> Self {
                    unsafe {
                        #[link(name = "symmetric_executor")]
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-executor@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[constructor]event-generator"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5BconstructorX5Devent_generator() -> *mut u8;
                        }
                        let ret = symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5BconstructorX5Devent_generator();
                        EventGenerator::from_handle(ret as usize)
                    }
                }
            }
            impl EventGenerator {
                #[allow(unused_unsafe, clippy::all)]
                /// Get the receiving side (to pass to other parts of the program)
                #[allow(async_fn_in_trait)]
                pub fn subscribe(&self) -> EventSubscription {
                    unsafe {
                        #[link(name = "symmetric_executor")]
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-executor@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[method]event-generator.subscribe"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5BmethodX5Devent_generatorX2Esubscribe(
                                _: *mut u8,
                            ) -> *mut u8;
                        }
                        let ret = symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5BmethodX5Devent_generatorX2Esubscribe(
                            (self).handle() as *mut u8,
                        );
                        EventSubscription::from_handle(ret as usize)
                    }
                }
            }
            impl EventGenerator {
                #[allow(unused_unsafe, clippy::all)]
                /// Trigger all subscribers
                #[allow(async_fn_in_trait)]
                pub fn activate(&self) -> () {
                    unsafe {
                        #[link(name = "symmetric_executor")]
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-executor@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[method]event-generator.activate"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5BmethodX5Devent_generatorX2Eactivate(
                                _: *mut u8,
                            );
                        }
                        symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5BmethodX5Devent_generatorX2Eactivate(
                            (self).handle() as *mut u8,
                        );
                    }
                }
            }
            impl CallbackRegistration {
                #[allow(unused_unsafe, clippy::all)]
                /// returns the data passed to the registration
                #[allow(async_fn_in_trait)]
                pub fn cancel(obj: CallbackRegistration) -> CallbackData {
                    unsafe {
                        #[link(name = "symmetric_executor")]
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-executor@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[static]callback-registration.cancel"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5BstaticX5Dcallback_registrationX2Ecancel(
                                _: *mut u8,
                            ) -> *mut u8;
                        }
                        let ret = symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00X5BstaticX5Dcallback_registrationX2Ecancel(
                            (&obj).take_handle() as *mut u8,
                        );
                        CallbackData::from_handle(ret as usize)
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Wait until all registered events have completed
            #[allow(async_fn_in_trait)]
            pub fn run() -> () {
                unsafe {
                    #[link(name = "symmetric_executor")]
                    #[link(
                        wasm_import_module = "symmetric:runtime/symmetric-executor@0.2.1"
                    )]
                    unsafe extern "C" {
                        #[allow(non_snake_case)]
                        #[cfg_attr(target_arch = "wasm32", link_name = "run")]
                        fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00run();
                    }
                    symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00run();
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Register a callback for an event
            #[allow(async_fn_in_trait)]
            pub fn register(
                trigger: EventSubscription,
                callback: CallbackFunction,
                data: CallbackData,
            ) -> CallbackRegistration {
                unsafe {
                    #[link(name = "symmetric_executor")]
                    #[link(
                        wasm_import_module = "symmetric:runtime/symmetric-executor@0.2.1"
                    )]
                    unsafe extern "C" {
                        #[allow(non_snake_case)]
                        #[cfg_attr(target_arch = "wasm32", link_name = "register")]
                        fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00register(
                            _: *mut u8,
                            _: *mut u8,
                            _: *mut u8,
                        ) -> *mut u8;
                    }
                    let ret = symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00register(
                        (&trigger).take_handle() as *mut u8,
                        (&callback).take_handle() as *mut u8,
                        (&data).take_handle() as *mut u8,
                    );
                    CallbackRegistration::from_handle(ret as usize)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Wait for a specific event
            #[allow(async_fn_in_trait)]
            pub fn block_on(trigger: EventSubscription) -> () {
                unsafe {
                    #[link(name = "symmetric_executor")]
                    #[link(
                        wasm_import_module = "symmetric:runtime/symmetric-executor@0.2.1"
                    )]
                    unsafe extern "C" {
                        #[allow(non_snake_case)]
                        #[cfg_attr(target_arch = "wasm32", link_name = "block-on")]
                        fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00block_on(
                            _: *mut u8,
                        );
                    }
                    symmetricX3AruntimeX2Fsymmetric_executorX400X2E2X2E1X00block_on(
                        (&trigger).take_handle() as *mut u8,
                    );
                }
            }
        }
        /// language neutral stream implementation
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod symmetric_stream {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type EventSubscription = super::super::super::symmetric::runtime::symmetric_executor::EventSubscription;
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Address {
                handle: _rt::Resource<Address>,
            }
            impl Address {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: usize) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> usize {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> usize {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Address {
                #[inline]
                unsafe fn drop(_handle: usize) {
                    #[link(
                        wasm_import_module = "symmetric:runtime/symmetric-stream@0.2.1"
                    )]
                    unsafe extern "C" {
                        #[allow(non_snake_case)]
                        #[cfg_attr(
                            target_arch = "wasm32",
                            link_name = "[resource-drop]address"
                        )]
                        fn symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5Bresource_dropX5Daddress(
                            _: *mut u8,
                        );
                    }
                    unsafe {
                        symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5Bresource_dropX5Daddress(
                            _handle as *mut u8,
                        )
                    };
                }
            }
            /// special zero allocation/copy data type (caller provided buffer)
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Buffer {
                handle: _rt::Resource<Buffer>,
            }
            impl Buffer {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: usize) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> usize {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> usize {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Buffer {
                #[inline]
                unsafe fn drop(_handle: usize) {
                    #[link(
                        wasm_import_module = "symmetric:runtime/symmetric-stream@0.2.1"
                    )]
                    unsafe extern "C" {
                        #[allow(non_snake_case)]
                        #[cfg_attr(
                            target_arch = "wasm32",
                            link_name = "[resource-drop]buffer"
                        )]
                        fn symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5Bresource_dropX5Dbuffer(
                            _: *mut u8,
                        );
                    }
                    unsafe {
                        symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5Bresource_dropX5Dbuffer(
                            _handle as *mut u8,
                        )
                    };
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct StreamObj {
                handle: _rt::Resource<StreamObj>,
            }
            impl StreamObj {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: usize) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> usize {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> usize {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for StreamObj {
                #[inline]
                unsafe fn drop(_handle: usize) {
                    #[link(
                        wasm_import_module = "symmetric:runtime/symmetric-stream@0.2.1"
                    )]
                    unsafe extern "C" {
                        #[allow(non_snake_case)]
                        #[cfg_attr(
                            target_arch = "wasm32",
                            link_name = "[resource-drop]stream-obj"
                        )]
                        fn symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5Bresource_dropX5Dstream_obj(
                            _: *mut u8,
                        );
                    }
                    unsafe {
                        symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5Bresource_dropX5Dstream_obj(
                            _handle as *mut u8,
                        )
                    };
                }
            }
            impl Buffer {
                #[allow(unused_unsafe, clippy::all)]
                #[allow(async_fn_in_trait)]
                pub fn new(addr: Address, capacity: u64) -> Self {
                    unsafe {
                        #[link(name = "symmetric_stream")]
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-stream@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[constructor]buffer"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BconstructorX5Dbuffer(
                                _: *mut u8,
                                _: i64,
                            ) -> *mut u8;
                        }
                        let ret = symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BconstructorX5Dbuffer(
                            (&addr).take_handle() as *mut u8,
                            _rt::as_i64(&capacity),
                        );
                        Buffer::from_handle(ret as usize)
                    }
                }
            }
            impl Buffer {
                #[allow(unused_unsafe, clippy::all)]
                #[allow(async_fn_in_trait)]
                pub fn get_address(&self) -> Address {
                    unsafe {
                        #[link(name = "symmetric_stream")]
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-stream@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[method]buffer.get-address"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5DbufferX2Eget_address(
                                _: *mut u8,
                            ) -> *mut u8;
                        }
                        let ret = symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5DbufferX2Eget_address(
                            (self).handle() as *mut u8,
                        );
                        Address::from_handle(ret as usize)
                    }
                }
            }
            impl Buffer {
                #[allow(unused_unsafe, clippy::all)]
                #[allow(async_fn_in_trait)]
                pub fn get_size(&self) -> u64 {
                    unsafe {
                        #[link(name = "symmetric_stream")]
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-stream@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[method]buffer.get-size"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5DbufferX2Eget_size(
                                _: *mut u8,
                            ) -> i64;
                        }
                        let ret = symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5DbufferX2Eget_size(
                            (self).handle() as *mut u8,
                        );
                        ret as u64
                    }
                }
            }
            impl Buffer {
                #[allow(unused_unsafe, clippy::all)]
                #[allow(async_fn_in_trait)]
                pub fn set_size(&self, size: u64) -> () {
                    unsafe {
                        #[link(name = "symmetric_stream")]
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-stream@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[method]buffer.set-size"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5DbufferX2Eset_size(
                                _: *mut u8,
                                _: i64,
                            );
                        }
                        symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5DbufferX2Eset_size(
                            (self).handle() as *mut u8,
                            _rt::as_i64(&size),
                        );
                    }
                }
            }
            impl Buffer {
                #[allow(unused_unsafe, clippy::all)]
                #[allow(async_fn_in_trait)]
                pub fn capacity(&self) -> u64 {
                    unsafe {
                        #[link(name = "symmetric_stream")]
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-stream@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[method]buffer.capacity"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5DbufferX2Ecapacity(
                                _: *mut u8,
                            ) -> i64;
                        }
                        let ret = symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5DbufferX2Ecapacity(
                            (self).handle() as *mut u8,
                        );
                        ret as u64
                    }
                }
            }
            impl StreamObj {
                #[allow(unused_unsafe, clippy::all)]
                #[allow(async_fn_in_trait)]
                pub fn new() -> Self {
                    unsafe {
                        #[link(name = "symmetric_stream")]
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-stream@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[constructor]stream-obj"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BconstructorX5Dstream_obj() -> *mut u8;
                        }
                        let ret = symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BconstructorX5Dstream_obj();
                        StreamObj::from_handle(ret as usize)
                    }
                }
            }
            impl StreamObj {
                #[allow(unused_unsafe, clippy::all)]
                /// create a new instance e.g. for reading or tasks
                #[allow(async_fn_in_trait)]
                pub fn clone(&self) -> StreamObj {
                    unsafe {
                        #[link(name = "symmetric_stream")]
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-stream@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[method]stream-obj.clone"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5Dstream_objX2Eclone(
                                _: *mut u8,
                            ) -> *mut u8;
                        }
                        let ret = symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5Dstream_objX2Eclone(
                            (self).handle() as *mut u8,
                        );
                        StreamObj::from_handle(ret as usize)
                    }
                }
            }
            impl StreamObj {
                #[allow(unused_unsafe, clippy::all)]
                /// reading (in roughly chronological order)
                /// indicates EOF
                #[allow(async_fn_in_trait)]
                pub fn is_write_closed(&self) -> bool {
                    unsafe {
                        #[link(name = "symmetric_stream")]
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-stream@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[method]stream-obj.is-write-closed"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5Dstream_objX2Eis_write_closed(
                                _: *mut u8,
                            ) -> i32;
                        }
                        let ret = symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5Dstream_objX2Eis_write_closed(
                            (self).handle() as *mut u8,
                        );
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl StreamObj {
                #[allow(unused_unsafe, clippy::all)]
                #[allow(async_fn_in_trait)]
                pub fn start_reading(&self, buffer: Buffer) -> () {
                    unsafe {
                        #[link(name = "symmetric_stream")]
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-stream@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[method]stream-obj.start-reading"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5Dstream_objX2Estart_reading(
                                _: *mut u8,
                                _: *mut u8,
                            );
                        }
                        symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5Dstream_objX2Estart_reading(
                            (self).handle() as *mut u8,
                            (&buffer).take_handle() as *mut u8,
                        );
                    }
                }
            }
            impl StreamObj {
                #[allow(unused_unsafe, clippy::all)]
                #[allow(async_fn_in_trait)]
                pub fn write_ready_activate(&self) -> () {
                    unsafe {
                        #[link(name = "symmetric_stream")]
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-stream@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[method]stream-obj.write-ready-activate"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5Dstream_objX2Ewrite_ready_activate(
                                _: *mut u8,
                            );
                        }
                        symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5Dstream_objX2Ewrite_ready_activate(
                            (self).handle() as *mut u8,
                        );
                    }
                }
            }
            impl StreamObj {
                #[allow(unused_unsafe, clippy::all)]
                #[allow(async_fn_in_trait)]
                pub fn read_ready_subscribe(&self) -> EventSubscription {
                    unsafe {
                        #[link(name = "symmetric_stream")]
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-stream@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[method]stream-obj.read-ready-subscribe"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5Dstream_objX2Eread_ready_subscribe(
                                _: *mut u8,
                            ) -> *mut u8;
                        }
                        let ret = symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5Dstream_objX2Eread_ready_subscribe(
                            (self).handle() as *mut u8,
                        );
                        super::super::super::symmetric::runtime::symmetric_executor::EventSubscription::from_handle(
                            ret as usize,
                        )
                    }
                }
            }
            impl StreamObj {
                #[allow(unused_unsafe, clippy::all)]
                /// none is EOF when read-ready, no data when polled
                #[allow(async_fn_in_trait)]
                pub fn read_result(&self) -> Option<Buffer> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[link(name = "symmetric_stream")]
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-stream@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[method]stream-obj.read-result"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5Dstream_objX2Eread_result(
                                _: *mut u8,
                                _: *mut u8,
                            );
                        }
                        symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5Dstream_objX2Eread_result(
                            (self).handle() as *mut u8,
                            ptr0,
                        );
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    Buffer::from_handle(l2 as usize)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl StreamObj {
                #[allow(unused_unsafe, clippy::all)]
                /// writing
                #[allow(async_fn_in_trait)]
                pub fn is_ready_to_write(&self) -> bool {
                    unsafe {
                        #[link(name = "symmetric_stream")]
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-stream@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[method]stream-obj.is-ready-to-write"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5Dstream_objX2Eis_ready_to_write(
                                _: *mut u8,
                            ) -> i32;
                        }
                        let ret = symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5Dstream_objX2Eis_ready_to_write(
                            (self).handle() as *mut u8,
                        );
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl StreamObj {
                #[allow(unused_unsafe, clippy::all)]
                #[allow(async_fn_in_trait)]
                pub fn write_ready_subscribe(&self) -> EventSubscription {
                    unsafe {
                        #[link(name = "symmetric_stream")]
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-stream@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[method]stream-obj.write-ready-subscribe"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5Dstream_objX2Ewrite_ready_subscribe(
                                _: *mut u8,
                            ) -> *mut u8;
                        }
                        let ret = symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5Dstream_objX2Ewrite_ready_subscribe(
                            (self).handle() as *mut u8,
                        );
                        super::super::super::symmetric::runtime::symmetric_executor::EventSubscription::from_handle(
                            ret as usize,
                        )
                    }
                }
            }
            impl StreamObj {
                #[allow(unused_unsafe, clippy::all)]
                #[allow(async_fn_in_trait)]
                pub fn start_writing(&self) -> Buffer {
                    unsafe {
                        #[link(name = "symmetric_stream")]
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-stream@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[method]stream-obj.start-writing"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5Dstream_objX2Estart_writing(
                                _: *mut u8,
                            ) -> *mut u8;
                        }
                        let ret = symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5Dstream_objX2Estart_writing(
                            (self).handle() as *mut u8,
                        );
                        Buffer::from_handle(ret as usize)
                    }
                }
            }
            impl StreamObj {
                #[allow(unused_unsafe, clippy::all)]
                /// none is EOF
                #[allow(async_fn_in_trait)]
                pub fn finish_writing(&self, buffer: Option<Buffer>) -> () {
                    unsafe {
                        let (result0_0, result0_1) = match &buffer {
                            Some(e) => (1i32, (e).take_handle() as *mut u8),
                            None => (0i32, std::ptr::null_mut()),
                        };
                        #[link(name = "symmetric_stream")]
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-stream@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[method]stream-obj.finish-writing"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5Dstream_objX2Efinish_writing(
                                _: *mut u8,
                                _: i32,
                                _: *mut u8,
                            );
                        }
                        symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5Dstream_objX2Efinish_writing(
                            (self).handle() as *mut u8,
                            result0_0,
                            result0_1,
                        );
                    }
                }
            }
            impl StreamObj {
                #[allow(unused_unsafe, clippy::all)]
                #[allow(async_fn_in_trait)]
                pub fn read_ready_activate(&self) -> () {
                    unsafe {
                        #[link(name = "symmetric_stream")]
                        #[link(
                            wasm_import_module = "symmetric:runtime/symmetric-stream@0.2.1"
                        )]
                        unsafe extern "C" {
                            #[allow(non_snake_case)]
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[method]stream-obj.read-ready-activate"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5Dstream_objX2Eread_ready_activate(
                                _: *mut u8,
                            );
                        }
                        symmetricX3AruntimeX2Fsymmetric_streamX400X2E2X2E1X00X5BmethodX5Dstream_objX2Eread_ready_activate(
                            (self).handle() as *mut u8,
                        );
                    }
                }
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicUsize, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicUsize,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: usize);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: usize) -> Self {
            debug_assert!(handle != 0 && handle != 0);
            Self {
                handle: AtomicUsize::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> usize {
            resource.handle.swap(0, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> usize {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    0 => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
}
#[rustfmt::skip]
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.43.0:symmetric:runtime@0.2.1:module:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1823] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xa2\x0d\x01A\x02\x01\
A\x05\x01B&\x01m\x02\x07pending\x05ready\x04\0\x0ecallback-state\x03\0\0\x04\0\x11\
callback-function\x03\x01\x04\0\x0dcallback-data\x03\x01\x04\0\x12event-subscrip\
tion\x03\x01\x04\0\x0fevent-generator\x03\x01\x04\0\x15callback-registration\x03\
\x01\x01m\x02\x07started\x0bnot-started\x04\0\x0bcall-status\x03\0\x07\x01h\x04\x01\
@\x01\x04self\x09\0\x7f\x04\0\x20[method]event-subscription.ready\x01\x0a\x01i\x04\
\x01@\x01\x0bnanosecondsw\0\x0b\x04\0'[static]event-subscription.from-timeout\x01\
\x0c\x01@\x01\x04self\x09\0\x0b\x04\0\x1e[method]event-subscription.dup\x01\x0d\x01\
@\x01\x04self\x09\x01\0\x04\0\x20[method]event-subscription.reset\x01\x0e\x01i\x05\
\x01@\0\0\x0f\x04\0\x1c[constructor]event-generator\x01\x10\x01h\x05\x01@\x01\x04\
self\x11\0\x0b\x04\0![method]event-generator.subscribe\x01\x12\x01@\x01\x04self\x11\
\x01\0\x04\0\x20[method]event-generator.activate\x01\x13\x01i\x06\x01i\x03\x01@\x01\
\x03obj\x14\0\x15\x04\0$[static]callback-registration.cancel\x01\x16\x01@\0\x01\0\
\x04\0\x03run\x01\x17\x01i\x02\x01@\x03\x07trigger\x0b\x08callback\x18\x04data\x15\
\0\x14\x04\0\x08register\x01\x19\x01@\x01\x07trigger\x0b\x01\0\x04\0\x08block-on\
\x01\x1a\x03\0*symmetric:runtime/symmetric-executor@0.2.1\x05\0\x02\x03\0\0\x12e\
vent-subscription\x01B*\x02\x03\x02\x01\x01\x04\0\x12event-subscription\x03\0\0\x04\
\0\x07address\x03\x01\x04\0\x06buffer\x03\x01\x04\0\x0astream-obj\x03\x01\x01i\x02\
\x01i\x03\x01@\x02\x04addr\x05\x08capacityw\0\x06\x04\0\x13[constructor]buffer\x01\
\x07\x01h\x03\x01@\x01\x04self\x08\0\x05\x04\0\x1a[method]buffer.get-address\x01\
\x09\x01@\x01\x04self\x08\0w\x04\0\x17[method]buffer.get-size\x01\x0a\x01@\x02\x04\
self\x08\x04sizew\x01\0\x04\0\x17[method]buffer.set-size\x01\x0b\x04\0\x17[metho\
d]buffer.capacity\x01\x0a\x01i\x04\x01@\0\0\x0c\x04\0\x17[constructor]stream-obj\
\x01\x0d\x01h\x04\x01@\x01\x04self\x0e\0\x0c\x04\0\x18[method]stream-obj.clone\x01\
\x0f\x01@\x01\x04self\x0e\0\x7f\x04\0\"[method]stream-obj.is-write-closed\x01\x10\
\x01@\x02\x04self\x0e\x06buffer\x06\x01\0\x04\0\x20[method]stream-obj.start-read\
ing\x01\x11\x01@\x01\x04self\x0e\x01\0\x04\0'[method]stream-obj.write-ready-acti\
vate\x01\x12\x01i\x01\x01@\x01\x04self\x0e\0\x13\x04\0'[method]stream-obj.read-r\
eady-subscribe\x01\x14\x01k\x06\x01@\x01\x04self\x0e\0\x15\x04\0\x1e[method]stre\
am-obj.read-result\x01\x16\x04\0$[method]stream-obj.is-ready-to-write\x01\x10\x04\
\0([method]stream-obj.write-ready-subscribe\x01\x14\x01@\x01\x04self\x0e\0\x06\x04\
\0\x20[method]stream-obj.start-writing\x01\x17\x01@\x02\x04self\x0e\x06buffer\x15\
\x01\0\x04\0![method]stream-obj.finish-writing\x01\x18\x04\0&[method]stream-obj.\
read-ready-activate\x01\x12\x03\0(symmetric:runtime/symmetric-stream@0.2.1\x05\x02\
\x04\0\x1esymmetric:runtime/module@0.2.1\x04\0\x0b\x0c\x01\0\x06module\x03\0\0\0\
G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.235.0\x10wit-bindge\
n-rust\x060.43.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen::rt::maybe_link_cabi_realloc();
}
