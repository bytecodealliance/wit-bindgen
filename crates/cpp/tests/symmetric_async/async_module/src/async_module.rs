// Generated by `wit-bindgen` 0.40.0. DO NOT EDIT!
// Options used:
#[allow(dead_code, clippy::all)]
pub mod test {
    pub mod test {

        #[allow(dead_code, unused_imports, clippy::all)]
        pub mod wait {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;

            use super::super::super::_rt;
            #[allow(unused_unsafe, clippy::all)]
            pub async fn async_sleep(nanoseconds: u64) -> () {
                unsafe {
                    #[link(wasm_import_module = "test:test/wait")]
                    #[link(name = "sleep")]
                    extern "C" {
                        #[cfg_attr(target_arch = "wasm32", link_name = "[async]sleep")]
                        fn testX3AtestX2FwaitX00X5BasyncX5Dsleep(_: u64) -> *mut u8;
                    }
                    ::wit_bindgen_symmetric_rt::async_support::await_result(move || unsafe {
                        testX3AtestX2FwaitX00X5BasyncX5Dsleep(nanoseconds)
                    })
                    .await;
                }
            }
        }
    }
}
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod test {
        pub mod test {

            #[allow(dead_code, unused_imports, clippy::all)]
            pub mod string_delay {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;

                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_async_forward_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result = async move {
                        let len0 = arg1;
                        let string0 = String::from(
                            std::str::from_utf8(std::slice::from_raw_parts(arg0, len0)).unwrap(),
                        );
                        let result = T::async_forward(string0).await;
                        let vec2 = (result.into_bytes()).into_boxed_slice();
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        ::core::mem::forget(vec2);
                        let output = arg2.cast::<usize>();
                        *unsafe { &mut *output } = ptr2 as usize;
                        *unsafe { &mut *output.add(1) } = len2;
                    };
                    let result = wit_bindgen_symmetric_rt::async_support::first_poll(result);
                    result.cast()
                }
                pub trait Guest {
                    async fn async_forward(s: _rt::String) -> _rt::String;
                }
                #[doc(hidden)]

                macro_rules! __export_test_test_string_delay_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[cfg_attr(target_arch = "wasm32", export_name = "[async]forward")]
          #[cfg_attr(not(target_arch = "wasm32"), no_mangle)]
          unsafe extern "C" fn testX3AtestX2Fstring_delayX00X5BasyncX5Dforward(arg0: *mut u8,arg1: usize,arg2: *mut u8,) -> *mut u8 {
            $($path_to_types)*::_export_async_forward_cabi::<$ty>(arg0, arg1, arg2)
          }
        };);
      }
                #[doc(hidden)]
                pub(crate) use __export_test_test_string_delay_cabi;
            }
        }
    }
}
mod _rt {
    #![allow(dead_code, clippy::all)]

    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }

    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }

    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }

    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen::rt::run_ctors_once();
    }
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    extern crate alloc as alloc_crate;
}

/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_async_module_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::test::test::string_delay::__export_test_test_string_delay_cabi!($ty with_types_in $($path_to_types_root)*::exports::test::test::string_delay);
  )
}
#[doc(inline)]
pub(crate) use __export_async_module_impl as export;

#[cfg(target_arch = "wasm32")]
#[unsafe(link_section = "component-type:wit-bindgen:0.40.0:test:test:async-module:encoded world")]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 278] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x93\x01\x01A\x02\x01\
A\x04\x01B\x02\x01@\x01\x0bnanosecondsw\x01\0\x04\0\x0c[async]sleep\x01\0\x03\0\x0e\
test:test/wait\x05\0\x01B\x02\x01@\x01\x01ss\0s\x04\0\x0e[async]forward\x01\0\x04\
\0\x16test:test/string-delay\x05\x01\x04\0\x16test:test/async-module\x04\0\x0b\x12\
\x01\0\x0casync-module\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-co\
mponent\x070.227.1\x10wit-bindgen-rust\x060.40.0";

#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen::rt::maybe_link_cabi_realloc();
}
