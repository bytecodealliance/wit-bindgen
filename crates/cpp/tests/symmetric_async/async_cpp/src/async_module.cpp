// Generated by `wit-bindgen` 0.3.0. DO NOT EDIT!

// Ensure that the *_component_type.o object is linked in
#ifdef __wasm32__
extern void __component_type_object_force_link_async_module(void);
void __component_type_object_force_link_async_module_public_use_in_this_compilation_unit(void) {
  __component_type_object_force_link_async_module();
}
#endif
#include "async_module_cpp.h"
#include "module_cpp.h"
#include "async_support.h"
#include <cstdlib> // realloc
#include <chrono>

extern "C" void *cabi_realloc(void *ptr, size_t old_size, size_t align, size_t new_size);

__attribute__((__weak__, __export_name__("cabi_realloc")))
void *cabi_realloc(void *ptr, size_t old_size, size_t align, size_t new_size) {
  (void) old_size;
  if (new_size == 0) return (void*) align;
  void *ret = realloc(ptr, new_size);
  if (!ret) abort();
  return ret;
}

extern "C" void* testX3AtestX2FwaitX00X5BasyncX5Dsleep(int64_t);
std::future<void> test::test::wait::Sleep(uint64_t nanoseconds)
{
  return lift_event(testX3AtestX2FwaitX00X5BasyncX5Dsleep(int64_t(nanoseconds)));
}

extern "C" 
void* testX3AtestX2Fstring_delayX00X5BasyncX5Dforward(uint8_t* arg0, size_t arg1, uint8_t* arg2)
{
  auto len0 = arg1;

  auto store = [arg2](wit::string && result1) {
    auto ptr2 = (uint8_t*)(result1.data());
    auto len2 = (size_t)(result1.size());
    result1.leak();

    *((size_t*)(arg2 + sizeof(void*))) = len2;
    *((uint8_t**)(arg2 + 0)) = ptr2;
  };

  auto result1 = exports::test::test::string_delay::Forward(std::string_view((char const*)(arg0), len0));
  return lower_async<wit::string>(std::move(result1), std::move(store));
}

// Component Adapters
