// Generated by `wit-bindgen` 0.3.0. DO NOT EDIT!
#include "the_world_cpp_native.h"
extern "C" __attribute__((import_module("foo:foo/strings")))
__attribute__((import_name("a"))) void
fooX3AfooX2FstringsX23a(uint8_t *, size_t);
extern "C" __attribute__((import_module("foo:foo/strings")))
__attribute__((import_name("b"))) uint8_t *
fooX3AfooX2FstringsX23b();
extern "C" __attribute__((import_module("cabi_post_foo:foo/strings")))
__attribute__((import_name("b"))) void
cabi_post_fooX3AfooX2FstringsX23b(uint8_t *);
extern "C" __attribute__((import_module("foo:foo/strings")))
__attribute__((import_name("c"))) uint8_t *
fooX3AfooX2FstringsX23c(uint8_t *, size_t, uint8_t *, size_t);
extern "C" __attribute__((import_module("cabi_post_foo:foo/strings")))
__attribute__((import_name("c"))) void
cabi_post_fooX3AfooX2FstringsX23c(uint8_t *);
extern "C" void fooX3AfooX2FstringsX00a(uint8_t *arg0, size_t arg1) {
  auto len0 = arg1;

  foo::foo::strings::A(std::string_view((char const *)(arg0), len0));
}
extern "C" void fooX3AfooX2FstringsX00b(uint8_t *arg0, uint8_t *resultptr) {
  auto result0 = foo::foo::strings::B();
  auto const &vec1 = result0;
  auto ptr1 = vec1.data();
  auto len1 = vec1.size();
  *((size_t *)(arg0 + 8)) = len1;
  *((uint8_t **)(arg0 + 0)) = ptr1;
}
extern "C" void fooX3AfooX2FstringsX00c(uint8_t *arg0, size_t arg1,
                                        uint8_t *arg2, size_t arg3,
                                        uint8_t *arg4, uint8_t *resultptr) {
  auto len0 = arg1;

  auto len1 = arg3;

  auto result2 =
      foo::foo::strings::C(std::string_view((char const *)(arg0), len0),
                           std::string_view((char const *)(arg2), len1));
  auto const &vec3 = result2;
  auto ptr3 = vec3.data();
  auto len3 = vec3.size();
  *((size_t *)(arg4 + 8)) = len3;
  *((uint8_t **)(arg4 + 0)) = ptr3;
}
void exports::foo::foo::strings::A(wit::string x) {
  auto const &vec0 = x;
  auto ptr0 = vec0.data();
  auto len0 = vec0.size();
  fooX3AfooX2FstringsX23a(ptr0, len0);
}
wit::guest_owned<std::string_view> exports::foo::foo::strings::B() {
  auto ret = fooX3AfooX2FstringsX23b();
  auto len0 = *((size_t *)(ret + 8));

  auto result1 =
      std::string_view((char const *)(*((uint8_t **)(ret + 0))), len0);
  return wit::guest_owned<std::string_view>(result1, ret,
                                            cabi_post_fooX3AfooX2FstringsX23b);
}
wit::guest_owned<std::string_view>
exports::foo::foo::strings::C(wit::string a, wit::string b) {
  auto const &vec0 = a;
  auto ptr0 = vec0.data();
  auto len0 = vec0.size();
  auto const &vec1 = b;
  auto ptr1 = vec1.data();
  auto len1 = vec1.size();
  auto ret = fooX3AfooX2FstringsX23c(ptr0, len0, ptr1, len1);
  auto len2 = *((size_t *)(ret + 8));

  auto result3 =
      std::string_view((char const *)(*((uint8_t **)(ret + 0))), len2);
  return wit::guest_owned<std::string_view>(result3, ret,
                                            cabi_post_fooX3AfooX2FstringsX23c);
}

// Component Adapters
