// Generated by `wit-bindgen` 0.3.0. DO NOT EDIT!

// Ensure that the *_component_type.o object is linked in
#ifdef __wasm32__
extern void __component_type_object_force_link_b(void);
void __component_type_object_force_link_b_public_use_in_this_compilation_unit(
    void) {
  __component_type_object_force_link_b();
}
#endif
#include "b_cpp.h"
#include <cstdlib> // realloc

extern "C" void *cabi_realloc(void *ptr, size_t old_size, size_t align,
                              size_t new_size);

__attribute__((__weak__, __export_name__("cabi_realloc"))) void *
cabi_realloc(void *ptr, size_t old_size, size_t align, size_t new_size) {
  (void)old_size;
  if (new_size == 0)
    return (void *)align;
  void *ret = realloc(ptr, new_size);
  if (!ret)
    abort();
  return ret;
}

extern "C" __attribute__((import_module("[export]foo:foo/resources")))
__attribute__((import_name("[resource-new]r"))) int32_t
X5BexportX5DfooX3AfooX2FresourcesX00X5Bresource_newX5Dr(uint8_t *);
extern "C" __attribute__((import_module("[export]foo:foo/resources")))
__attribute__((import_name("[resource-rep]r")))
uint8_t *X5BexportX5DfooX3AfooX2FresourcesX00X5Bresource_repX5Dr(int32_t);
extern "C" __attribute__((import_module("[export]foo:foo/resources")))
__attribute__((import_name("[resource-drop]r"))) void
    X5BexportX5DfooX3AfooX2FresourcesX00X5Bresource_dropX5Dr(int32_t);
extern "C" __attribute__((__export_name__("foo:foo/resources#[dtor]r"))) void
fooX3AfooX2FresourcesX23X5BdtorX5Dr(uint8_t *arg0) {
  ((exports::foo::foo::resources::R *)arg0)->handle = -1;
  exports::foo::foo::resources::R::Dtor(
      (exports::foo::foo::resources::R *)arg0);
}
extern "C"
    __attribute__((__export_name__("foo:foo/resources#[constructor]r"))) int32_t
    fooX3AfooX2FresourcesX23X5BconstructorX5Dr(int32_t arg0) {
  auto result0 = exports::foo::foo::resources::R::New((uint32_t(arg0)));
  return result0.release()->handle;
}
extern "C"
    __attribute__((__export_name__("foo:foo/resources#[method]r.add"))) void
    fooX3AfooX2FresourcesX23X5BmethodX5DrX2Eadd(uint8_t *arg0, int32_t arg1) {
  (std::ref(*(exports::foo::foo::resources::R *)arg0))
      .get()
      .Add((uint32_t(arg1)));
}
int32_t exports::foo::foo::resources::R::ResourceNew(R *self) {
  return X5BexportX5DfooX3AfooX2FresourcesX00X5Bresource_newX5Dr(
      (uint8_t *)self);
}
exports::foo::foo::resources::R *
exports::foo::foo::resources::R::ResourceRep(int32_t id) {
  return (exports::foo::foo::resources::R *)
      X5BexportX5DfooX3AfooX2FresourcesX00X5Bresource_repX5Dr(id);
}
void exports::foo::foo::resources::R::ResourceDrop(int32_t id) {
  X5BexportX5DfooX3AfooX2FresourcesX00X5Bresource_dropX5Dr(id);
}
extern "C" __attribute__((__export_name__("foo:foo/resources#create"))) int32_t
fooX3AfooX2FresourcesX23create() {
  auto result0 = exports::foo::foo::resources::Create();
  return result0.release()->handle;
}
extern "C" __attribute__((__export_name__("foo:foo/resources#consume"))) void
fooX3AfooX2FresourcesX23consume(int32_t arg0) {
  auto obj0 = exports::foo::foo::resources::R::Owned(
      exports::foo::foo::resources::R::ResourceRep(arg0));
  //obj0->into_handle();
  exports::foo::foo::resources::Consume(std::move(obj0));
}

// Component Adapters
