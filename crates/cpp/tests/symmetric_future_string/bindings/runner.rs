// Generated by `wit-bindgen` 0.42.1. DO NOT EDIT!
// Options used:
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod a {
    pub mod b {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod the_test {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[allow(unused_unsafe, clippy::all)]
            #[allow(async_fn_in_trait)]
            pub fn f() -> wit_bindgen::rt::async_support::FutureReader<_rt::String> {
                unsafe {
                    #[link(wasm_import_module = "a:b/the-test")]
                    unsafe extern "C" {
                        #[allow(non_snake_case)]
                        #[cfg_attr(target_arch = "wasm32", link_name = "f")]
                        fn aX3AbX2Fthe_testX00f() -> *mut u8;
                    }
                    let ret = aX3AbX2Fthe_testX00f();
                    wit_bindgen::rt::async_support::FutureReader::new(
                        ret,
                        &super::super::super::wit_future::vtable0::VTABLE,
                    )
                }
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            unsafe { String::from_utf8_unchecked(bytes) }
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        unsafe {
            let layout = alloc::Layout::from_size_align_unchecked(size, align);
            alloc::dealloc(ptr, layout);
        }
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}
pub mod wit_future {
    #![allow(dead_code, unused_variables, clippy::all)]
    #[doc(hidden)]
    pub trait FuturePayload: Unpin + Sized + 'static {
        const VTABLE: &'static wit_bindgen::rt::async_support::FutureVtable<Self>;
    }
    #[doc(hidden)]
    #[allow(unused_unsafe)]
    pub mod vtable0 {
        unsafe fn lift(ptr: *mut u8) -> super::super::_rt::String {
            unsafe {
                let l0 = *ptr.add(0).cast::<*mut u8>();
                let l1 = *ptr.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
                let len2 = l1;
                let bytes2 = if len2 > 0 {
                    super::super::_rt::Vec::from_raw_parts(l0.cast(), len2, len2)
                } else {
                    Default::default()
                };
                super::super::_rt::string_lift(bytes2)
            }
        }
        unsafe fn lower(value: super::super::_rt::String, ptr: *mut u8) {
            unsafe {
                let vec0 = value;
                let ptr0 = vec0.as_ptr().cast::<u8>();
                let len0 = vec0.len();
                *ptr.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len0;
                *ptr.add(0).cast::<*mut u8>() = ptr0.cast_mut();
            }
        }
        unsafe fn dealloc_lists(ptr: *mut u8) {
            unsafe {
                let l0 = *ptr.add(0).cast::<*mut u8>();
                let l1 = *ptr.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
                super::super::_rt::cabi_dealloc(l0, l1, 1);
            }
        }
        pub static VTABLE: wit_bindgen::rt::async_support::FutureVtable<
            super::super::_rt::String,
        > = wit_bindgen::rt::async_support::FutureVtable::<super::super::_rt::String> {
            layout: unsafe {
                ::std::alloc::Layout::from_size_align_unchecked(
                    2 * ::core::mem::size_of::<*const u8>(),
                    ::core::mem::size_of::<*const u8>(),
                )
            },
            lift,
            lower,
        };
        impl super::FuturePayload for super::super::_rt::String {
            const VTABLE: &'static wit_bindgen::rt::async_support::FutureVtable<Self> = &VTABLE;
        }
    }
    /// Creates a new Component Model `future` with the specified payload type.
    ///
    /// The `default` function provided computes the default value to be sent in
    /// this future if no other value was otherwise sent.
    pub fn new<T: FuturePayload>(
        default: fn() -> T,
    ) -> (
        wit_bindgen::rt::async_support::FutureWriter<T>,
        wit_bindgen::rt::async_support::FutureReader<T>,
    ) {
        unsafe { wit_bindgen::rt::async_support::future_new::<T>(default, T::VTABLE) }
    }
}
#[rustfmt::skip]
#[cfg(target_arch = "wasm32")]
#[unsafe(link_section = "component-type:wit-bindgen:0.42.1:a:b:runner:encoded world")]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 180] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x078\x01A\x02\x01A\x02\x01\
B\x03\x01e\x01s\x01@\0\0\0\x04\0\x01f\x01\x01\x03\0\x0ca:b/the-test\x05\0\x04\0\x0a\
a:b/runner\x04\0\x0b\x0c\x01\0\x06runner\x03\0\0\0G\x09producers\x01\x0cprocesse\
d-by\x02\x0dwit-component\x070.235.0\x10wit-bindgen-rust\x060.42.1";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen::rt::maybe_link_cabi_realloc();
}
