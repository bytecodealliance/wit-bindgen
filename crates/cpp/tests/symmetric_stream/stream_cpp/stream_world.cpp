// Generated by `wit-bindgen` 0.3.0. DO NOT EDIT!

// Ensure that the *_component_type.o object is linked in
#ifdef __wasm32__
extern void __component_type_object_force_link_stream_world(void);
void __component_type_object_force_link_stream_world_public_use_in_this_compilation_unit(void) {
  __component_type_object_force_link_stream_world();
}
#endif
#include "stream_world_cpp.h"
#include "async_support.h"
#include <cstdlib> // realloc

extern "C" void *cabi_realloc(void *ptr, size_t old_size, size_t align, size_t new_size);

__attribute__((__weak__, __export_name__("cabi_realloc")))
void *cabi_realloc(void *ptr, size_t old_size, size_t align, size_t new_size) {
  (void) old_size;
  if (new_size == 0) return (void*) align;
  void *ret = realloc(ptr, new_size);
  if (!ret) abort();
  return ret;
}

template <>
const uint32_t wit::StreamProperties<uint32_t>::lowered_size = 4;
template <>
uint32_t wit::StreamProperties<uint32_t>::lift(uint8_t const*ptr) {
  return *(uint32_t const*)ptr;
}
template <>
void wit::StreamProperties<uint32_t>::lower(uint32_t && value, uint8_t *ptr) {
  *(uint32_t*)ptr = value;
}

// struct IntLifting {
//   static constexpr size_t SIZE = sizeof(T);
//   static T lift(uint8_t const*ptr) {
//     return *(T const*)ptr;
//   }
//   static void lower(T&& obj, uint8_t *ptr) {
// //    new ((T*)ptr) T(std::move(obj));
//     *(T*)ptr = obj;
//   }
// };

extern "C" uint8_t* testX3AtestX2Fstream_sourceX00create();
wit::stream<uint32_t> test::test::stream_source::Create()
{
  auto ret = testX3AtestX2Fstream_sourceX00create();
  return lift_stream<uint32_t>(ret);
}
extern "C" 
uint8_t* testX3AtestX2Fstream_testX00create()
{
  auto result0 = exports::test::test::stream_test::Create();
  return lower_stream<uint32_t>(std::move(result0));
}

// Component Adapters
