// Generated by `wit-bindgen` 0.40.0. DO NOT EDIT!
// Options used:
#[allow(dead_code, clippy::all)]
pub mod test {
    pub mod test {

        #[allow(dead_code, unused_imports, clippy::all)]
        pub mod stream_source {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;

            use super::super::super::_rt;
            #[allow(unused_unsafe, clippy::all)]
            pub fn create() -> wit_bindgen_symmetric_rt::async_support::StreamReader<u32> {
                unsafe {
                    #[link(wasm_import_module = "test:test/stream-source")]
                    #[link(name = "source")]
                    extern "C" {
                        #[cfg_attr(target_arch = "wasm32", link_name = "create")]
                        fn testX3AtestX2Fstream_sourceX00create() -> *mut u8;
                    }
                    let ret = testX3AtestX2Fstream_sourceX00create();
                    wit_bindgen_symmetric_rt::async_support::StreamReader::from_handle(
                        ret,
                        <u32 as super::super::super::wit_stream::StreamPayload>::VTABLE,
                    )
                }
            }
        }
    }
}
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod test {
        pub mod test {

            #[allow(dead_code, unused_imports, clippy::all)]
            pub mod stream_test {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;

                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_create_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::create();
                    (result0).take_handle() as *mut u8
                }
                pub trait Guest {
                    fn create() -> wit_bindgen_symmetric_rt::async_support::StreamReader<u32>;
                }
                #[doc(hidden)]

                macro_rules! __export_test_test_stream_test_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[cfg_attr(target_arch = "wasm32", export_name = "create")]
          #[cfg_attr(not(target_arch = "wasm32"), no_mangle)]
          unsafe extern "C" fn testX3AtestX2Fstream_testX00create() -> *mut u8 {
            $($path_to_types)*::_export_create_cabi::<$ty>()
          }
        };);
      }
                #[doc(hidden)]
                pub(crate) use __export_test_test_stream_test_cabi;
            }
        }
    }
}
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::alloc;
    pub use alloc_crate::boxed::Box;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen::rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
pub mod wit_stream {
    #![allow(dead_code, unused_variables, clippy::all)]

    pub trait StreamPayload: Unpin + Sized + 'static {
        const VTABLE: &'static wit_bindgen_symmetric_rt::async_support::StreamVtable<Self>;
    }
    #[doc(hidden)]
    #[allow(unused_unsafe)]
    pub mod vtable0 {

        unsafe fn lift(ptr: *mut u8) -> u32 {
            unsafe { *ptr.cast::<u32>() }
        }
        unsafe fn lower(value: u32, ptr: *mut u8) {
            unsafe {
                *ptr.cast::<u32>() = value;
            }
        }

        pub static VTABLE: wit_bindgen_symmetric_rt::async_support::StreamVtable<u32> =
            wit_bindgen_symmetric_rt::async_support::StreamVtable::<u32> {
                layout: unsafe { ::std::alloc::Layout::from_size_align_unchecked(4, 4) },
                lift: Some(lift),
                lower: Some(lower),
            };
        impl super::StreamPayload for u32 {
            const VTABLE: &'static wit_bindgen_symmetric_rt::async_support::StreamVtable<Self> =
                &VTABLE;
        }
    }
    /// Creates a new Component Model `stream` with the specified payload type.
    pub fn new<T: StreamPayload>() -> (
        wit_bindgen_symmetric_rt::async_support::StreamWriter<T>,
        wit_bindgen_symmetric_rt::async_support::StreamReader<T>,
    ) {
        wit_bindgen_symmetric_rt::async_support::stream_support::new_stream(T::VTABLE)
    }
}

/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_stream_world_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::test::test::stream_test::__export_test_test_stream_test_cabi!($ty with_types_in $($path_to_types_root)*::exports::test::test::stream_test);
  )
}
#[doc(inline)]
pub(crate) use __export_stream_world_impl as export;

#[cfg(target_arch = "wasm32")]
#[unsafe(link_section = "component-type:wit-bindgen:0.40.0:test:test:stream-world:encoded world")]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 264] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x85\x01\x01A\x02\x01\
A\x04\x01B\x03\x01f\x01y\x01@\0\0\0\x04\0\x06create\x01\x01\x03\0\x17test:test/s\
tream-source\x05\0\x01B\x03\x01f\x01y\x01@\0\0\0\x04\0\x06create\x01\x01\x04\0\x15\
test:test/stream-test\x05\x01\x04\0\x16test:test/stream-world\x04\0\x0b\x12\x01\0\
\x0cstream-world\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-componen\
t\x070.227.1\x10wit-bindgen-rust\x060.40.0";

#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen::rt::maybe_link_cabi_realloc();
}
