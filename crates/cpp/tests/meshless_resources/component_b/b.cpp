// Generated by `wit-bindgen` 0.3.0. DO NOT EDIT!

// Ensure that the *_component_type.o object is linked in
#ifdef __wasm32__
extern void __component_type_object_force_link_b(void);
void __component_type_object_force_link_b_public_use_in_this_compilation_unit(
    void) {
  __component_type_object_force_link_b();
}
#endif
#include "b_cpp.h"
#include <cstdlib> // realloc

extern "C" void *cabi_realloc(void *ptr, size_t old_size, size_t align,
                              size_t new_size);

__attribute__((__weak__, __export_name__("cabi_realloc"))) void *
cabi_realloc(void *ptr, size_t old_size, size_t align, size_t new_size) {
  (void)old_size;
  if (new_size == 0)
    return (void *)align;
  void *ret = realloc(ptr, new_size);
  if (!ret)
    abort();
  return ret;
}

extern "C"
    __attribute__((__export_name__("foo:foo/resources#[resource_drop]r"))) void
    fooX3AfooX2FresourcesX00X5Bresource_dropX5Dr(uint8_t *arg0) {
  exports::foo::foo::resources::R::ResourceDrop((uint8_t *)arg0);
}
extern "C" __attribute__((__export_name__("foo:foo/resources#[constructor]r")))
uint8_t *
fooX3AfooX2FresourcesX00X5BconstructorX5Dr(int32_t arg0) {
  auto result0 = exports::foo::foo::resources::R::New((uint32_t(arg0)));
  return result0.release()->handle;
}
extern "C"
    __attribute__((__export_name__("foo:foo/resources#[method]r.add"))) void
    fooX3AfooX2FresourcesX00X5BmethodX5DrX2Eadd(uint8_t *arg0, int32_t arg1) {
  (std::ref(*(exports::foo::foo::resources::R *)arg0))
      .get()
      .Add((uint32_t(arg1)));
}
uint8_t *exports::foo::foo::resources::R::ResourceNew(R *self) {
  return (uint8_t *)self;
}
exports::foo::foo::resources::R *
exports::foo::foo::resources::R::ResourceRep(uint8_t *id) {
  return (exports::foo::foo::resources::R *)id;
}
void exports::foo::foo::resources::R::ResourceDrop(uint8_t *id) {
  exports::foo::foo::resources::R::Dtor((exports::foo::foo::resources::R *)id);
}
extern "C" __attribute__((__export_name__("foo:foo/resources#create")))
uint8_t *
fooX3AfooX2FresourcesX00create() {
  auto result0 = exports::foo::foo::resources::Create();
  return result0.release()->handle;
}
extern "C" __attribute__((__export_name__("foo:foo/resources#consume"))) void
fooX3AfooX2FresourcesX00consume(uint8_t *arg0) {
  auto obj0 = exports::foo::foo::resources::R::Owned(
      exports::foo::foo::resources::R::ResourceRep(arg0));
  exports::foo::foo::resources::Consume(std::move(obj0));
}

// Component Adapters
