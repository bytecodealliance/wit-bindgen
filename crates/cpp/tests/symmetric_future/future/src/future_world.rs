// Generated by `wit-bindgen` 0.42.1. DO NOT EDIT!
// Options used:
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod test {
    pub mod test {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod future_source {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[allow(unused_unsafe, clippy::all)]
            #[allow(async_fn_in_trait)]
            pub fn create() -> wit_bindgen::rt::async_support::FutureReader<u32> {
                unsafe {
                    #[link(name = "source")]
                    #[link(wasm_import_module = "test:test/future-source")]
                    unsafe extern "C" {
                        #[allow(non_snake_case)]
                        #[cfg_attr(target_arch = "wasm32", link_name = "create")]
                        fn testX3AtestX2Ffuture_sourceX00create() -> *mut u8;
                    }
                    let ret = testX3AtestX2Ffuture_sourceX00create();
                    wit_bindgen::rt::async_support::FutureReader::new(
                        ret,
                        &super::super::super::wit_future::vtable0::VTABLE,
                    )
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod test {
        pub mod test {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod future_test {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case, unused_unsafe)]
                pub unsafe fn _export_create_cabi<T: Guest>() -> *mut u8 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                        let result0 = { T::create() };
                        (result0).take_handle() as *mut u8
                    }
                }
                pub trait Guest {
                    #[allow(async_fn_in_trait)]
                    fn create() -> wit_bindgen::rt::async_support::FutureReader<u32>;
                }
                #[doc(hidden)]
                macro_rules! __export_test_test_future_test_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[cfg_attr(target_arch = "wasm32", export_name =
                        "create")] #[cfg_attr(not(target_arch = "wasm32"), no_mangle)]
                        #[allow(non_snake_case)] unsafe extern "C" fn
                        testX3AtestX2Ffuture_testX00create() -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_create_cabi::<$ty > () } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_test_test_future_test_cabi;
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen::rt::run_ctors_once();
    }
}
pub mod wit_future {
    #![allow(dead_code, unused_variables, clippy::all)]
    #[doc(hidden)]
    pub trait FuturePayload: Unpin + Sized + 'static {
        const VTABLE: &'static wit_bindgen::rt::async_support::FutureVtable<Self>;
    }
    #[doc(hidden)]
    #[allow(unused_unsafe)]
    pub mod vtable0 {
        unsafe fn lift(ptr: *mut u8) -> u32 {
            unsafe {
                let l0 = *ptr.add(0).cast::<i32>();
                l0 as u32
            }
        }
        unsafe fn lower(value: u32, ptr: *mut u8) {
            unsafe {
                *ptr.add(0).cast::<i32>() = super::super::_rt::as_i32(value);
            }
        }
        unsafe fn dealloc_lists(ptr: *mut u8) {
            unsafe {}
        }
        pub static VTABLE: wit_bindgen::rt::async_support::FutureVtable<u32> =
            wit_bindgen::rt::async_support::FutureVtable::<u32> {
                layout: unsafe { ::std::alloc::Layout::from_size_align_unchecked(4, 4) },
                lift,
                lower,
            };
        impl super::FuturePayload for u32 {
            const VTABLE: &'static wit_bindgen::rt::async_support::FutureVtable<Self> = &VTABLE;
        }
    }
    /// Creates a new Component Model `future` with the specified payload type.
    ///
    /// The `default` function provided computes the default value to be sent in
    /// this future if no other value was otherwise sent.
    pub fn new<T: FuturePayload>(
        default: fn() -> T,
    ) -> (
        wit_bindgen::rt::async_support::FutureWriter<T>,
        wit_bindgen::rt::async_support::FutureReader<T>,
    ) {
        unsafe { wit_bindgen::rt::async_support::future_new::<T>(default, T::VTABLE) }
    }
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_future_world_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::test::test::future_test::__export_test_test_future_test_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::test::test::future_test);
    };
}
#[doc(inline)]
pub(crate) use __export_future_world_impl as export;
#[rustfmt::skip]
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.42.1:test:test:future-world:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 264] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x85\x01\x01A\x02\x01\
A\x04\x01B\x03\x01e\x01y\x01@\0\0\0\x04\0\x06create\x01\x01\x03\0\x17test:test/f\
uture-source\x05\0\x01B\x03\x01e\x01y\x01@\0\0\0\x04\0\x06create\x01\x01\x04\0\x15\
test:test/future-test\x05\x01\x04\0\x16test:test/future-world\x04\0\x0b\x12\x01\0\
\x0cfuture-world\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-componen\
t\x070.235.0\x10wit-bindgen-rust\x060.42.1";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen::rt::maybe_link_cabi_realloc();
}
