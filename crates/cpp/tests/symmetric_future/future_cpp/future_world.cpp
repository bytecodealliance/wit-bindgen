// Generated by `wit-bindgen` 0.42.1. DO NOT EDIT!

// Ensure that the *_component_type.o object is linked in
#ifdef __wasm32__
extern void __component_type_object_force_link_future_world(void);
void __component_type_object_force_link_future_world_public_use_in_this_compilation_unit(void) {
  __component_type_object_force_link_future_world();
}
#endif
#include "future_world_cpp.h"
#include <cstdlib> // realloc

extern "C" void *cabi_realloc(void *ptr, size_t old_size, size_t align, size_t new_size);

__attribute__((__weak__))
void *cabi_realloc(void *ptr, size_t old_size, size_t align, size_t new_size) {
  (void) old_size;
  if (new_size == 0) return (void*) align;
  void *ret = realloc(ptr, new_size);
  if (!ret) abort();
  return ret;
}


struct Lift1 {
  static uint32_t lift(uint8_t const* ptr) { int32_t l0 = *((int32_t const*)(ptr + 0));
  return (uint32_t(l0));}
  static void lower(uint32_t && value, uint8_t *ptr) { *((int32_t*)(ptr + 0)) = (int32_t(value));
}
static constexpr size_t SIZE = 4;
};
struct Lift2 {
  static uint32_t lift(uint8_t const* ptr) { int32_t l0 = *((int32_t const*)(ptr + 0));
  return (uint32_t(l0));}
  static void lower(uint32_t && value, uint8_t *ptr) { *((int32_t*)(ptr + 0)) = (int32_t(value));
}
static constexpr size_t SIZE = 4;
};
#include "async_support.h"
extern "C" uint8_t* testX3AtestX2Ffuture_sourceX00create();
std::future<uint32_t> test::test::future_source::Create()
{
  auto ret = testX3AtestX2Ffuture_sourceX00create();
  return lift_future<uint32_t, Lift1>(ret);
}
extern "C" 
uint8_t* testX3AtestX2Ffuture_testX00create()
{
  auto result0 = exports::test::test::future_test::Create();
  return lower_future<uint32_t, Lift2>(std::move(result0));
}

// Component Adapters
