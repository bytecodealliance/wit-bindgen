#pragma once
#include "wit.h"
#include <cstdint>
#include <map>
#include <utility>
/* User class definition file, autogenerated once, then user modified
 * Updated versions of this file are generated into TheResource.template.
 */
namespace exports {
namespace test {
namespace ownership {
namespace both_list_and_resource {
class TheResource : public wit::ResourceExportBase<TheResource> {

public:
  static void Dtor(both_list_and_resource::TheResource *self) { delete self; }
  TheResource(wit::vector<wit::string> the_list) {
    the_list_ = std::move(the_list);
  }
  static Owned New(wit::vector<wit::string> the_list) {
    return Owned(new TheResource(std::move(the_list)));
  }
  wit::vector<wit::string> ToUpper() {
    wit::vector<wit::string> result =
        wit::vector<wit::string>::allocate(the_list_.size());
    for (size_t i = 0; i < the_list_.size(); ++i) {
      auto str = the_list_[i];
      for (char &c : str) {
        c = std::toupper(c);
      }
      result.initialize(i, std::move(str));
    }
    return result;
  }
  static int32_t ResourceNew(both_list_and_resource::TheResource *self);
  static TheResource *ResourceRep(int32_t id);
  static void ResourceDrop(int32_t id);

private:
  wit::vector<wit::string> the_list_;
};
} // namespace both_list_and_resource
} // namespace ownership
} // namespace test
} // namespace exports
