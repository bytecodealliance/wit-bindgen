#pragma once
#include <cstdint>
#include <utility>
#include <vector>
#include <map>
#include "wit.h"
/* User class definition file, autogenerated once, then user modified
* Updated versions of this file are generated into X.template.
*/
namespace exports {namespace test {namespace resources {class X : public wit::ResourceExportBase<X>{
        int32_t value;
        public:

        static void Dtor(resources::X* self){delete self;}
        X(int32_t a) : value(a) {}
        static Owned New(int32_t a){return Owned(new X(a));}
        int32_t GetA() { return value; }
        void SetA(int32_t a) { value = a; }
        static X::Owned Add(resources::X::Owned x, int32_t a) {
          x->value += a;
          return x;
        }
        static int32_t ResourceNew(resources::X* self);
        static X* ResourceRep(int32_t id);
        static void ResourceDrop(int32_t id);
      };

    }}}
